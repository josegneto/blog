{"version":3,"file":"component---src-templates-blog-post-js-566965cf5ae72d2f0024.js","mappings":"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","sources":["webpack://blog/./i18n.js","webpack://blog/./src/assets/profile-pic.jpg","webpack://blog/./src/components/Bio.js","webpack://blog/./src/components/Panel.js","webpack://blog/./src/components/SEO.js","webpack://blog/./src/utils/whitelist.js","webpack://blog/./src/utils/i18n.js","webpack://blog/./src/templates/blog-post.js","webpack://blog/./src/utils/helpers.js"],"sourcesContent":["// Please keep keys lowercase!\r\nexports.supportedLanguages = {\r\n  en: 'English',\r\n  ru: 'Русский',\r\n  tr: 'Türkçe',\r\n  es: 'Español',\r\n  ko: '한국어',\r\n  sv: 'Svenska',\r\n  it: 'Italiano',\r\n  id: 'Bahasa Indonesia',\r\n  'pt-br': 'Português do Brasil',\r\n  pl: 'Polski',\r\n  'zh-hant': '繁體中文',\r\n  'zh-hans': '简体中文',\r\n  ja: '日本語',\r\n  fr: 'Français',\r\n  he: 'עברית',\r\n  hu: 'Magyar',\r\n  vi: 'Tiếng Việt',\r\n  th: 'ไทย',\r\n  my: 'မြန်မာဘာသာ',\r\n  sk: 'Slovenčina',\r\n  te: 'తెలుగు',\r\n  uk: 'Українська',\r\n  bg: 'Български',\r\n  cs: 'Čeština',\r\n  de: 'Deutsch',\r\n  nl: 'Nederlands',\r\n  nb: 'Norsk',\r\n  fa: 'فارسی',\r\n  ar: 'العربية',\r\n  sr: 'srpski',\r\n};\r\n","export default __webpack_public_path__ + \"static/profile-pic-e62b772c54c375f14ca38fe6dd232ee2.jpg\";","import React from 'react';\r\nimport profilePic from '../assets/profile-pic.jpg';\r\nimport { rhythm } from '../utils/typography';\r\n\r\nclass Bio extends React.Component {\r\n  render() {\r\n    return (\r\n      <div\r\n        style={{\r\n          display: 'flex',\r\n          marginBottom: rhythm(2),\r\n        }}\r\n      >\r\n        <img\r\n          src={profilePic}\r\n          alt={`Dan Abramov`}\r\n          style={{\r\n            marginRight: rhythm(1 / 2),\r\n            marginBottom: 0,\r\n            width: rhythm(2),\r\n            height: rhythm(2),\r\n            borderRadius: '50%',\r\n          }}\r\n        />\r\n        <p style={{ maxWidth: 310 }}>\r\n          Personal blog by{' '}\r\n          <a href=\"https://josegneto.github.io\">José Neto</a>.{' '}\r\n          <br></br>Electrical Engineer.\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Bio;\r\n","import React from 'react';\r\n\r\nfunction Panel({ children, style = {} }) {\r\n  return (\r\n    <p\r\n      style={{\r\n        fontSize: '0.9em',\r\n        border: '1px solid var(--hr)',\r\n        borderRadius: '0.75em',\r\n        padding: '0.75em',\r\n        background: 'var(--inlineCode-bg)',\r\n        wordBreak: 'keep-all',\r\n        ...style,\r\n      }}\r\n    >\r\n      {children}\r\n    </p>\r\n  );\r\n}\r\n\r\nexport default Panel;\r\n","import React from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport PropTypes from 'prop-types';\r\nimport { StaticQuery, graphql } from 'gatsby';\r\n\r\nconst query = graphql`\r\n  query GetSiteMetadata {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n        author\r\n        description\r\n        siteUrl\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nfunction SEO({ meta, image, title, description, slug, lang = 'en' }) {\r\n  return (\r\n    <StaticQuery\r\n      query={query}\r\n      render={data => {\r\n        const { siteMetadata } = data.site;\r\n        const metaDescription = description || siteMetadata.description;\r\n        const metaImage = image ? `${siteMetadata.siteUrl}/${image}` : null;\r\n        const url = `${siteMetadata.siteUrl}${slug}`;\r\n        return (\r\n          <Helmet\r\n            htmlAttributes={{ lang }}\r\n            {...(title\r\n              ? {\r\n                  titleTemplate: `%s — ${siteMetadata.title}`,\r\n                  title,\r\n                }\r\n              : {\r\n                  title: `${siteMetadata.title} — A blog by José Neto`,\r\n                })}\r\n            meta={[\r\n              {\r\n                name: 'description',\r\n                content: metaDescription,\r\n              },\r\n              {\r\n                property: 'og:url',\r\n                content: url,\r\n              },\r\n              {\r\n                property: 'og:title',\r\n                content: title || siteMetadata.title,\r\n              },\r\n              {\r\n                property: 'og:description',\r\n                content: metaDescription,\r\n              },\r\n            ]\r\n              .concat(\r\n                metaImage\r\n                  ? [\r\n                      {\r\n                        property: 'og:image',\r\n                        content: metaImage,\r\n                      },                    \r\n                    ]\r\n                  : []\r\n              )\r\n              .concat(meta)}\r\n          />\r\n        );\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nSEO.defaultProps = {\r\n  meta: [],\r\n  title: '',\r\n  slug: '',\r\n};\r\n\r\nSEO.propTypes = {\r\n  description: PropTypes.string,\r\n  image: PropTypes.string,\r\n  meta: PropTypes.array,\r\n  slug: PropTypes.string,\r\n  title: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default SEO;\r\n","// Please keep keys lowercase!\r\nexport default {\r\n  'https://reactjs.org': {\r\n    'pt-br': 'https://pt-br.reactjs.org',\r\n    // other languages...\r\n  },\r\n  // other links...\r\n};\r\n","import { supportedLanguages } from './../../i18n';\r\nimport whitelist from './whitelist';\r\n\r\n// This is kind of a mess for some languages.\r\n// Try to be as short as possible.\r\n// Make sure you use a real code (e.g. \"ja\", not \"jp\").\r\n// Some resources:\r\n// http://www.rfc-editor.org/rfc/bcp/bcp47.txt\r\n// https://www.w3.org/International/articles/language-tags/\r\n// https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry\r\n// https://discuss.httparchive.org/t/what-are-the-invalid-uses-of-the-lang-attribute/1022\r\n\r\nexport const codeToLanguage = code =>\r\n  supportedLanguages[code].replace(/ /g, ' ' /* nbsp */);\r\n\r\nexport const loadFontsForCode = code => {\r\n  switch (code) {\r\n    case 'ru':\r\n    case 'bg':\r\n      import('../fonts/fonts-shared.cyrillic.css');\r\n      import('../fonts/fonts-post.cyrillic.css');\r\n      break;\r\n    case 'uk':\r\n      import('../fonts/fonts-shared.cyrillic.css');\r\n      import('../fonts/fonts-post.cyrillic.css');\r\n      import('../fonts/fonts-shared.latin-ext.css');\r\n      import('../fonts/fonts-post.latin-ext.css');\r\n      break;\r\n    case 'cs':\r\n    case 'da':\r\n    case 'de':\r\n    case 'es':\r\n    case 'fi':\r\n    case 'fr':\r\n    case 'he':\r\n    case 'hu':\r\n    case 'it':\r\n    case 'nl':\r\n    case 'no':\r\n    case 'pl':\r\n    case 'pt-br':\r\n    case 'sk':\r\n    case 'sr':\r\n    case 'sq':\r\n    case 'sv':\r\n    case 'tr':\r\n      import('../fonts/fonts-shared.latin-ext.css');\r\n      import('../fonts/fonts-post.latin-ext.css');\r\n      break;\r\n    case 'vi':\r\n      import('../fonts/fonts-shared.vietnamese.css');\r\n      import('../fonts/fonts-post.vietnamese.css');\r\n      break;\r\n    case 'fa':\r\n      import('../fonts/fonts-post.persian.css');\r\n      break;\r\n    case 'ar':\r\n      import('../fonts/fonts-post.arabic.css');\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n};\r\n\r\n// TODO: the curried signature is weird.\r\nexport const createLanguageLink = (slug, lang) => {\r\n  const rawSlug = slug.replace(`${lang}/`, '');\r\n\r\n  return targetLang =>\r\n    targetLang === 'en' ? rawSlug : `/${targetLang}${rawSlug}`;\r\n};\r\n\r\nexport const replaceAnchorLinksByLanguage = (html, code) => {\r\n  // Match any link using https://regexr.com/4airl\r\n  const matches = html.match(/https?:\\/\\/(www)?[^\\/\\s)\"?]+/gm);\r\n\r\n  // Return same html if no matches were found\r\n  // or code isn't supported\r\n  if (!matches || !supportedLanguages[code]) {\r\n    return html;\r\n  }\r\n\r\n  matches.forEach(url => {\r\n    // Replace to locale url if and only if exists in whitelist\r\n    // and has code registered\r\n    if (whitelist[url] && whitelist[url][code]) {\r\n      html = html.replace(url, whitelist[url][code]);\r\n    }\r\n  });\r\n\r\n  return html;\r\n};\r\n","import React from 'react';\r\nimport { Link, graphql } from 'gatsby';\r\nimport get from 'lodash/get';\r\n\r\nimport '../fonts/fonts-post.css';\r\nimport Bio from '../components/Bio';\r\nimport Layout from '../components/Layout';\r\nimport SEO from '../components/SEO';\r\nimport Panel from '../components/Panel';\r\nimport { formatPostDate, formatReadingTime } from '../utils/helpers';\r\nimport { rhythm, scale } from '../utils/typography';\r\nimport {\r\n  codeToLanguage,\r\n  createLanguageLink,\r\n  loadFontsForCode,\r\n  replaceAnchorLinksByLanguage,\r\n} from '../utils/i18n';\r\n\r\nconst GITHUB_USERNAME = 'gaearon';\r\nconst GITHUB_REPO_NAME = 'overreacted.io';\r\nconst systemFont = `system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\",\r\n    \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\",\r\n    \"Droid Sans\", \"Helvetica Neue\", sans-serif`;\r\n\r\nclass Translations extends React.Component {\r\n  render() {\r\n    let { translations, lang, languageLink, editUrl } = this.props;\r\n\r\n    let readerTranslations = translations.filter(lang => lang !== 'ru');\r\n    let hasRussianTranslation = translations.indexOf('ru') !== -1;\r\n\r\n    return (\r\n      <div className=\"translations\">\r\n        <Panel style={{ fontFamily: systemFont }}>\r\n          {translations.length > 0 && (\r\n            <span>\r\n              {hasRussianTranslation && (\r\n                <span>\r\n                  Originally written in:{' '}\r\n                  {'en' === lang ? (\r\n                    <b>{codeToLanguage('en')}</b>\r\n                  ) : (\r\n                    <Link to={languageLink('en')}>English</Link>\r\n                  )}\r\n                  {' • '}\r\n                  {'ru' === lang ? (\r\n                    <b>Русский (авторский перевод)</b>\r\n                  ) : (\r\n                    <Link to={languageLink('ru')}>\r\n                      Русский (авторский перевод)\r\n                    </Link>\r\n                  )}\r\n                  <br />\r\n                  <br />\r\n                </span>\r\n              )}\r\n              <span>Translated by readers into: </span>\r\n              {readerTranslations.map((l, i) => (\r\n                <React.Fragment key={l}>\r\n                  {l === lang ? (\r\n                    <b>{codeToLanguage(l)}</b>\r\n                  ) : (\r\n                    <Link to={languageLink(l)}>{codeToLanguage(l)}</Link>\r\n                  )}\r\n                  {i === readerTranslations.length - 1 ? '' : ' • '}\r\n                </React.Fragment>\r\n              ))}\r\n            </span>\r\n          )}\r\n          {lang !== 'en' && (\r\n            <>\r\n              <br />\r\n              <br />\r\n              {lang !== 'ru' && (\r\n                <>\r\n                  <Link to={languageLink('en')}>Read the original</Link>\r\n                  {' • '}\r\n                  <a href={editUrl} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    Improve this translation\r\n                  </a>\r\n                  {' • '}\r\n                </>\r\n              )}\r\n              <Link to={`/${lang}`}>View all translated posts</Link>{' '}\r\n            </>\r\n          )}\r\n        </Panel>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass BlogPostTemplate extends React.Component {\r\n  render() {\r\n    const post = this.props.data.markdownRemark;\r\n    const siteTitle = get(this.props, 'data.site.siteMetadata.title');\r\n    let {\r\n      previous,\r\n      next,\r\n      slug,\r\n      translations,\r\n      translatedLinks,\r\n    } = this.props.pageContext;\r\n    const lang = post.fields.langKey;\r\n\r\n    // Replace original links with translated when available.\r\n    let html = post.html;\r\n\r\n    // Replace original anchor links by lang when available in whitelist\r\n    // see utils/whitelist.js\r\n    html = replaceAnchorLinksByLanguage(html, lang);\r\n\r\n    translatedLinks.forEach(link => {\r\n      // jeez\r\n      function escapeRegExp(str) {\r\n        return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n      }\r\n      let translatedLink = '/' + lang + link;\r\n      html = html.replace(\r\n        new RegExp('\"' + escapeRegExp(link) + '\"', 'g'),\r\n        '\"' + translatedLink + '\"'\r\n      );\r\n    });\r\n\r\n    translations = translations.slice();\r\n    translations.sort((a, b) => {\r\n      return codeToLanguage(a) < codeToLanguage(b) ? -1 : 1;\r\n    });\r\n\r\n    loadFontsForCode(lang);\r\n    // TODO: this curried function is annoying\r\n    const languageLink = createLanguageLink(slug, lang);\r\n    const enSlug = languageLink('en');\r\n    const editUrl = `https://github.com/${GITHUB_USERNAME}/${GITHUB_REPO_NAME}/edit/master/src/pages/${enSlug.slice(\r\n      1,\r\n      enSlug.length - 1\r\n    )}/index${lang === 'en' ? '' : '.' + lang}.md`;\r\n    const discussUrl = `https://mobile.twitter.com/search?q=${encodeURIComponent(\r\n      `https://overreacted.io${enSlug}`\r\n    )}`;\r\n\r\n    return (\r\n      <Layout location={this.props.location} title={siteTitle}>\r\n        <SEO\r\n          lang={lang}\r\n          title={post.frontmatter.title}\r\n          description={post.frontmatter.spoiler}\r\n          slug={post.fields.slug}\r\n        />\r\n        <main>\r\n          <article>\r\n            <header>\r\n              <h1 style={{ color: 'var(--textTitle)' }}>\r\n                {post.frontmatter.title}\r\n              </h1>\r\n              <p\r\n                style={{\r\n                  ...scale(-1 / 5),\r\n                  display: 'block',\r\n                  marginBottom: rhythm(1),\r\n                  marginTop: rhythm(-4 / 5),\r\n                }}\r\n              >\r\n                {formatPostDate(post.frontmatter.date, lang)}\r\n                {` • ${formatReadingTime(post.timeToRead)}`}\r\n              </p>\r\n              {translations.length > 0 && (\r\n                <Translations\r\n                  translations={translations}\r\n                  editUrl={editUrl}\r\n                  languageLink={languageLink}\r\n                  lang={lang}\r\n                />\r\n              )}\r\n            </header>\r\n            <div dangerouslySetInnerHTML={{ __html: html }} />\r\n            {/* <footer>\r\n              <p>\r\n                <a href={discussUrl} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                  Discuss on Twitter\r\n                </a>\r\n                {` • `}\r\n                <a href={editUrl} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                  Edit on GitHub\r\n                </a>\r\n              </p>\r\n            </footer> */}\r\n          </article>\r\n        </main>\r\n        <aside>\r\n          <div\r\n            style={{\r\n              margin: '90px 0 40px 0',\r\n              fontFamily: systemFont,\r\n            }}\r\n          >\r\n            {/* <Signup cta={post.frontmatter.cta} /> */}\r\n          </div>\r\n          <h3\r\n            style={{\r\n              fontFamily: 'Montserrat, sans-serif',\r\n              marginTop: rhythm(0.25),\r\n            }}\r\n          >\r\n            <Link\r\n              style={{\r\n                boxShadow: 'none',\r\n                textDecoration: 'none',\r\n                color: 'var(--blue)',\r\n              }}\r\n              to={'/'}\r\n            >\r\n              Overreacted\r\n            </Link>\r\n          </h3>\r\n          <Bio />\r\n          <nav>\r\n            <ul\r\n              style={{\r\n                display: 'flex',\r\n                flexWrap: 'wrap',\r\n                justifyContent: 'space-between',\r\n                listStyle: 'none',\r\n                padding: 0,\r\n              }}\r\n            >\r\n              <li>\r\n                {previous && (\r\n                  <Link\r\n                    to={previous.fields.slug}\r\n                    rel=\"prev\"\r\n                    style={{ marginRight: 20 }}\r\n                  >\r\n                    ← {previous.frontmatter.title}\r\n                  </Link>\r\n                )}\r\n              </li>\r\n              <li>\r\n                {next && (\r\n                  <Link to={next.fields.slug} rel=\"next\">\r\n                    {next.frontmatter.title} →\r\n                  </Link>\r\n                )}\r\n              </li>\r\n            </ul>\r\n          </nav>\r\n        </aside>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BlogPostTemplate;\r\n\r\nexport const pageQuery = graphql`\r\n  query BlogPostBySlug($slug: String!) {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n        author\r\n      }\r\n    }\r\n    markdownRemark(fields: { slug: { eq: $slug } }) {\r\n      id\r\n      html\r\n      timeToRead\r\n      frontmatter {\r\n        title\r\n        date(formatString: \"MMMM DD, YYYY\")\r\n        spoiler\r\n      }\r\n      fields {\r\n        slug\r\n        langKey\r\n      }\r\n    }\r\n  }\r\n`;\r\n","export function formatReadingTime(minutes) {\r\n  let cups = Math.round(minutes / 5);\r\n  let bowls = 0;\r\n  if (cups > 5) {\r\n    return `${new Array(Math.round(cups / Math.E))\r\n      .fill('🍱')\r\n      .join('')} ${minutes} min read`;\r\n  } else {\r\n    return `${new Array(cups || 1).fill('☕️').join('')} ${minutes} min read`;\r\n  }\r\n}\r\n\r\n// `lang` is optional and will default to the current user agent locale\r\nexport function formatPostDate(date, lang) {\r\n  if (typeof Date.prototype.toLocaleDateString !== 'function') {\r\n    return date;\r\n  }\r\n\r\n  date = new Date(date);\r\n  const args = [\r\n    lang,\r\n    { day: 'numeric', month: 'long', year: 'numeric' },\r\n  ].filter(Boolean);\r\n  return date.toLocaleDateString(...args);\r\n}\r\n"],"names":["exports","en","ru","tr","es","ko","sv","it","id","pl","ja","fr","he","hu","vi","th","my","sk","te","uk","bg","cs","de","nl","nb","fa","ar","sr","Bio","render","style","display","marginBottom","rhythm","src","profilePic","alt","marginRight","width","height","borderRadius","maxWidth","href","React","children","fontSize","border","padding","background","wordBreak","SEO","meta","image","title","description","slug","lang","StaticQuery","query","data","siteMetadata","site","metaDescription","metaImage","siteUrl","url","htmlAttributes","titleTemplate","name","content","property","concat","defaultProps","codeToLanguage","code","supportedLanguages","replace","systemFont","Translations","this","props","translations","languageLink","editUrl","readerTranslations","filter","hasRussianTranslation","indexOf","className","Panel","fontFamily","length","Link","to","map","l","i","key","target","rel","BlogPostTemplate","post","markdownRemark","siteTitle","get","pageContext","previous","next","translatedLinks","fields","langKey","html","matches","match","forEach","whitelist","replaceAnchorLinksByLanguage","link","translatedLink","RegExp","slice","sort","a","b","loadFontsForCode","rawSlug","targetLang","createLanguageLink","enSlug","encodeURIComponent","Layout","location","frontmatter","spoiler","color","scale","marginTop","formatPostDate","date","formatReadingTime","timeToRead","dangerouslySetInnerHTML","__html","margin","boxShadow","textDecoration","flexWrap","justifyContent","listStyle","minutes","cups","Math","round","Array","E","fill","join","Date","prototype","toLocaleDateString","args","day","month","year","Boolean"],"sourceRoot":""}